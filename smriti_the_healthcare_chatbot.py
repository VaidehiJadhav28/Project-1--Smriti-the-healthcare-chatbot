# -*- coding: utf-8 -*-
"""SMRITI the healthcare chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lx_5m9Z3lO35a_UNUwiK4Oh9x8YWOUfn

Smriti is a healthcare chatbot developed in python. The concept of NLTK is used for the creation and working of the chatbot. This project involves creating a conversational interface where users can describe symptoms or inquire about the chatbot. The bot assesses symptoms, offers advice, and emphasizes the importance of consulting a professional for accurate diagnoses. It's a simple yet interactive tool for basic health-related queries.
"""

!pip install nltk

"""Working 1: Symptom based conversation"""

#nltk.chat.util is a module within the NLTK (Natural Language Toolkit) library that-
#provides utilities to create simple chatbots or conversational agents.
#Chat class is used to facilitate conversation between the user and the chatbot.
#reflections is a predefined dictionary in NLTK that contains predefined reflections for pronouns.

from nltk.chat.util import Chat, reflections

# Function for greeting the user
def greet():
    print("Welcome to Smriti's Health Assistant!")
    print("How can I assist you today?")

# Function to initiate the health checker
def health_checker():
    greet()  # Greet the user initially
    while True:
        print("\nPlease select an option:")
        print("1. Get Checked for Symptoms.")
        print("2. Ask Questions about the Chatbot")
        print("3. Quit")

        choice = input("Hello, Enter your choice (1/2/3): ")

        if choice == '1':
          # Initiating symptom checking conversation
            print("Please type 'hello' to begin the symptom check.")
            chat = Chat(symptom_pairs, reflections)
            chat.converse()
        elif choice == '2':
          # Initiating chatbot information conversation
            print("Please start entering your questions")
            chat = Chat(bot_info_pairs, reflections)
            chat.converse()
        elif choice == '3':
          # Exiting the program
            print("Goodbye! Feel free to return if you have more questions.")
            break
        else:
          # Handling invalid input
            print("Hmm, I think I need my spectacles. That doesn't look like a valid choice. Let's try that again!")


# Checking if the script is being run as the main program
if __name__ == "__main__":

# Patterns and responses for symptom checking conversation
 symptom_pairs = [
    [
        r"hi|hello|hey",
        ["Hello, I'm Smriti. Please describe your symptoms. How can I assist you today?",]
    ],
    [
        r"(.*) (pain|headache|stomach|ache|back|weak)",
        [
            "It could be caused because of less sleep or extended exposure to a bright screen. Have you taken any medication?",
            "Would you like some suggestions for relieving the symptoms?"
        ],
    ],
    [
        r"(.*) (cough|sore throat|runny nose)",
        [
            "Oh no! Had lots of ice-cream lately? Have you been experiencing any fever along with these symptoms?"
        ],
    ],
    [
        r"(.*) (fever|temperature)",
        [
            "A fever could be a sign of various conditions. Have you measured your temperature? ",
            "Fevers can be caused by different factors. Are you experiencing any other symptoms along with the fever? "
        ],
    ],
    [
        r"yes",
        ["Since when have you been feeling this way?"]
    ],
    [
        r"no",
        ["Since when have you been feeling this way?"]
    ],
    [
        r"(\d+ (days|weeks|months))",
        ["I advise you to visit a doctor, it is important to seek medical advice."]
    ],

    [
        r"ok|thank you|thanks",
        ["You're welcome! Remember, laughter is the best medicine. Take care! (type 'quit' to exit)"]
    ],
    [
        r"quit",
        ["Goodbye! Feel free to return if you have more questions."]
    ],
 ]
  # Patterns and responses for chatbot information conversation
 bot_info_pairs = [

    [
        r"Who are you?",
        ["I am smriti the healthcare chatbot. I can suggest you remedies and give you medical advices based on the symptoms that you enter. You can also ask me questions about myself."]
    ],
    [
        r"What can you do?|What are your capabilities?|What can you help with?",
        ["I can provide information on common health issues, suggest remedies, and advise when to seek medical help."]
    ],
    [
        r"What is your purpose?",
        ["I was created to assist with basic health-related queries and offer guidance on symptoms and self-care."]
    ],
    [
        r"Where do you get information?|What are your sources?",
        ["I rely on verified medical databases and resources to provide accurate information."]
    ],
    [
        r"Can you diagnose|medical advice",
        ["I'm not a doctor. I can offer suggestions based on symptoms, but for a proper diagnosis, it's best to consult a healthcare professional."]
    ],
    [
        r"How do you work?|How does your algorithm work?",
        ["I use predefined patterns to recognize user input and respond accordingly. My aim is to offer helpful health-related guidance."]
    ],
    ]

# Start the health checker
 health_checker()

"""Working 2: Conversation on the capablities and details of the chatbot

Using the same code, we can ask the chatbot about it's details, development and working.
"""

#nltk.chat.util is a module within the NLTK (Natural Language Toolkit) library that-
#provides utilities to create simple chatbots or conversational agents.
#Chat class is used to facilitate conversation between the user and the chatbot.
#reflections is a predefined dictionary in NLTK that contains predefined reflections for pronouns.

from nltk.chat.util import Chat, reflections

# Function for greeting the user
def greet():
    print("Welcome to Smriti's Health Assistant!")
    print("How can I assist you today?")

# Function to initiate the health checker
def health_checker():
    greet()  # Greet the user initially
    while True:
        print("\nPlease select an option:")
        print("1. Get Checked for Symptoms.")
        print("2. Ask Questions about the Chatbot")
        print("3. Quit")

        choice = input("Hello, Enter your choice (1/2/3): ")

        if choice == '1':
          # Initiating symptom checking conversation
            print("Please type 'hello' to begin the symptom check.")
            chat = Chat(symptom_pairs, reflections)
            chat.converse()
        elif choice == '2':
          # Initiating chatbot information conversation
            print("Please start entering your questions")
            chat = Chat(bot_info_pairs, reflections)
            chat.converse()
        elif choice == '3':
          # Exiting the program
            print("Goodbye! Feel free to return if you have more questions.")
            break
        else:
          # Handling invalid input
            print("Hmm, I think I need my spectacles. That doesn't look like a valid choice. Let's try that again!")


# Checking if the script is being run as the main program
if __name__ == "__main__":

# Patterns and responses for symptom checking conversation
 symptom_pairs = [
    [
        r"hi|hello|hey",
        ["Hello, I'm Smriti. Please describe your symptoms. How can I assist you today?",]
    ],
    [
        r"(.*) (pain|headache|stomach|ache|back|weak)",
        [
            "It could be caused because of less sleep or extended exposure to a bright screen. Have you taken any medication?",
            "Would you like some suggestions for relieving the symptoms?"
        ],
    ],
    [
        r"(.*) (cough|sore throat|runny nose)",
        [
            "Oh no! Had lots of ice-cream lately? Have you been experiencing any fever along with these symptoms?"
        ],
    ],
    [
        r"(.*) (fever|temperature)",
        [
            "A fever could be a sign of various conditions. Have you measured your temperature? ",
            "Fevers can be caused by different factors. Are you experiencing any other symptoms along with the fever? "
        ],
    ],
    [
        r"yes",
        ["Since when have you been feeling this way?"]
    ],
    [
        r"no",
        ["Since when have you been feeling this way?"]
    ],
    [
        r"(\d+ (days|weeks|months))",
        ["I advise you to visit a doctor, it is important to seek medical advice."]
    ],

    [
        r"ok|thank you|thanks",
        ["You're welcome! Remember, laughter is the best medicine. Take care! (type 'quit' to exit)"]
    ],
    [
        r"quit",
        ["Goodbye! Feel free to return if you have more questions."]
    ],
 ]
  # Patterns and responses for chatbot information conversation
 bot_info_pairs = [

    [
        r"Who are you?",
        ["I am smriti the healthcare chatbot. I can suggest you remedies and give you medical advices based on the symptoms that you enter. You can also ask me questions about myself."]
    ],
    [
        r"What can you do?|What are your capabilities?|What can you help with?",
        ["I can provide information on common health issues, suggest remedies, and advise when to seek medical help."]
    ],
    [
        r"What is your purpose?",
        ["I was created to assist with basic health-related queries and offer guidance on symptoms and self-care."]
    ],
    [
        r"Where do you get information?|What are your sources?",
        ["I rely on verified medical databases and resources to provide accurate information."]
    ],
    [
        r"Can you diagnose|medical advice",
        ["I'm not a doctor. I can offer suggestions based on symptoms, but for a proper diagnosis, it's best to consult a healthcare professional."]
    ],
    [
        r"How do you work?|How does your algorithm work?",
        ["I use predefined patterns to recognize user input and respond accordingly. My aim is to offer helpful health-related guidance."]
    ],
    ]

# Start the health checker
 health_checker()

"""Breakdown of the code:

1. Imports: It imports the necessary modules (Chat and reflections) from NLTK's nltk.chat.util.

2. Functions:
    - greet(): Greets the user when called.
    - health_checker(): Handles the main functionality of the health assistant. It continuously prompts the user for options:
        - Option 1: Initiates a symptom checking conversation using predefined patterns and responses.
        - Option 2: Allows the user to ask questions about the chatbot. It engages in a conversation based on predefined pairs of questions and responses.
        - Option 3: Quits the program.

3. Execution:
    - If the script is run directly (if __name__ == "__main__":), it calls health_checker() to start the assistant.

4. Pattern-Response Pairs:
    - symptom_pairs: Contains patterns and responses related to symptom checking.
    - bot_info_pairs: Contains patterns and responses for information about the chatbot.

5. Flow:
    - Upon execution, the program greets the user.
    - It presents options for symptom checking, asking questions, or quitting.
    - Based on the user's choice, it engages in conversation or quits accordingly.

6. Conversations:
    - The program uses the Chat class from NLTK to converse with the user using predefined patterns and responses.
    - Depending on the user's input, it matches patterns and generates appropriate responses.

7. Looping:
    - The program operates in a loop, allowing the user to select options until they choose to quit.

8. Farewell Meassages:
     - "Goodbye! Feel free to return if you have more questions." and "You're welcome! Remember, laughter is the best medicine. Take care! (type 'quit' to exit)" are the farewell massages included in the code.
    
Overall, the code presents a menu-driven health assistant that engages in conversations based on user choices, offering assistance with symptoms or providing information about the chatbot's capabilities.
"""